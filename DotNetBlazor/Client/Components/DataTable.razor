@using DotNetBlazor.Shared.Models.Common;
@using DotNetBlazor.Client.Utility;

@typeparam T

@if (List != null)
{
    <div class="thead-light">
        <table class="table table-striped table-bordered" cellspacing="0">
            <thead class="thead-light">
                <tr>
                    @foreach (var prop in typeof(T).GetProperties())
                    {
                        <th>@prop.GetDisplayName()</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in List)
                {
                    <tr>
                        @foreach (var prop in typeof(T).GetProperties())
                        {
                            <td>@prop.GetValue(item)</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="text-center">
        <ul class="pagination justify-content-end">
            <li class="page-item">
                <button class="page-link" aria-label="Previous" @onclick="GoToPreviousPage">
                    <span aria-hidden="true">&laquo;</span>
                </button>
            </li>
            @for (int i = 1; i <= Pagination.TotalPage(); i++)
            {
                <li class="page-item @(i == Pagination.Page ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            <li class="page-item">
                <button class="page-link" aria-label="Next" @onclick="GoToNextPage">
                    <span aria-hidden="true">&raquo;</span>
                </button>
            </li>
        </ul>
    </div>
}

@code {
    [Parameter] public List<T> List { get; set; }
    [Parameter] public Pagination Pagination { get; set; }
    [Parameter] public EventCallback<int> PageChanged { get; set; }

    private void GoToPage(int pageNumber)
    {
        if (Pagination.Page != pageNumber)
        {
            PageChanged.InvokeAsync(pageNumber);
        }
    }

    private void GoToPreviousPage()
    {
        if (Pagination.Page > 1)
        {
            GoToPage(Pagination.Page - 1);
        }
    }

    private void GoToNextPage()
    {
        if (Pagination.Page < Pagination.TotalPage())
        {
            GoToPage(Pagination.Page + 1);
        }
    }
}