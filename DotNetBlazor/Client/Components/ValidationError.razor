@using DotNetBlazor.Client.Utility;
@using DotNetBlazor.Shared.Models.Common;
@implements IDisposable
@inject IEventHelper EventHelper

@code {
    private ValidationMessageStore messageStore;

    [CascadingParameter]
    private EditContext CurrentEditContext { get; set; }

    protected override void OnInitialized()
    {
        EventHelper.ValidationError += DisplayErrors;

        if (CurrentEditContext == null)
        {
            throw new InvalidOperationException(
                $"{nameof(ValidationError)} requires a cascading " +
                $"parameter of type {nameof(EditContext)}. " +
                $"For example, you can use {nameof(ValidationError)} " +
                $"inside an {nameof(EditForm)}.");
        }

        messageStore = new ValidationMessageStore(CurrentEditContext);

        CurrentEditContext.OnValidationRequested += (s, e) =>
            messageStore.Clear();
        CurrentEditContext.OnFieldChanged += (s, e) =>
            messageStore.Clear(e.FieldIdentifier);
    }

    public void DisplayErrors(List<Error> errors)
    {
        foreach (var err in errors)
        {
            messageStore.Add(CurrentEditContext.Field(err.Field), err.Message);
        }
        CurrentEditContext.NotifyValidationStateChanged();
    }

    public void ClearErrors()
    {
        messageStore.Clear();
        CurrentEditContext.NotifyValidationStateChanged();
    }

    public void Dispose()
    {
        EventHelper.ValidationError -= DisplayErrors;
    }
}
