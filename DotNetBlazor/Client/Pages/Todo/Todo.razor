@page "/todo"
@using DotNetBlazor.Client.Components
@using DotNetBlazor.Client.Pages.Todo.Components
@using DotNetBlazor.Client.Services
@using DotNetBlazor.Shared.Models.Todo
@using DotNetBlazor.Shared.Models.Common;
@using DotNetBlazor.Client.Utility;
@using System.Net
@inject ITodoService TodoService
@inject IAlertService AlertService

<PageTitle>Todo</PageTitle>

<div class="container">
    <div class="main-body">
        <div class="row mb-2">
            <div class="col-md-12">
                <SubmitButton OnClick="HandleCreate" Text="Add Task" Icon="plus" Type="primary" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <DataTable List="@list" Pagination="@pagination" PageChanged="HandlePageChange" Edit="HandleEdit"
                           Delete="HandleDelete" />
            </div>
        </div>
    </div>
</div>

<Modal Header="Create Task" IsOpen="IsOpenCreateModal" Close="()=> IsOpenCreateModal = false">

    <Body>
        <TodoForm FormId="CreateForm" SubmitEvent="Create" />
    </Body>
    <Footer>
        <SubmitButton FormId="CreateForm" Type="submit" Text="Create" Btn="success" />
    </Footer>
</Modal>

<Modal Header="Edit Task" IsOpen="IsOpenUpdateModal" Close="()=> IsOpenUpdateModal = false">

    <Body>
        <TodoForm FormId="UpdateForm" Model="todoRequest" SubmitEvent="Update" />
    </Body>
    <Footer>
        <SubmitButton FormId="UpdateForm" Type="submit" Text="Update" Btn="success" />
    </Footer>
</Modal>

<Modal Header="Delete Task" IsOpen="IsOpenDeleteModal" Close="()=> IsOpenDeleteModal = false">

    <Body>
        <p>Are you sure want to delete this item?</p>
    </Body>
    <Footer>
        <SubmitButton Text="Delete" Type="danger" OnClick="Delete" />
    </Footer>
</Modal>


@code {
    private List<TodoDetail> list = new();
    private ListRequest listRequest = new();
    private Pagination pagination = new();
    private TodoRequest todoRequest = new();
    private DeleteTodoRequest deleteModel = new();

    private bool IsOpenCreateModal = false;
    private bool IsOpenUpdateModal = false;
    private bool IsOpenDeleteModal = false;
    protected override async Task OnInitializedAsync()
    {
        listRequest.Page = 1;
        listRequest.PerPage = 5;
        await List(listRequest);
    }
    private async void HandlePageChange(ListRequest changeRequest)
    {
        listRequest = changeRequest;
        await List(listRequest);
    }
    private void HandleCreate() => IsOpenCreateModal = true;
    private void HandleEdit(object item)
    {
        todoRequest = item.Map<TodoRequest>();
        IsOpenUpdateModal = true;
    }
    private void HandleDelete(object item)
    {
        deleteModel = item.Map<DeleteTodoRequest>();
        IsOpenDeleteModal = true;
    }

    private async Task List(ListRequest listRequest)
    {
        try
        {
            TodoListResponse response = await TodoService.List(listRequest.Map<TodoListRequest>());

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                list = response.Data.List;
                pagination = response.Data.Pagination;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Create(TodoRequest model)
    {
        try
        {
            // Logic for creating a new item
            TodoResponse response = await TodoService.Create(model);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                model = new TodoRequest(); // Clear the form
                AlertService.Success("Todo created successfully!");
                IsOpenCreateModal = false;
                _ = List(listRequest);
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Update(TodoRequest model)
    {
        try
        {
            TodoResponse response = await TodoService.Update(model);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                model = new TodoRequest();
                AlertService.Success("Todo updated successfully!");
                IsOpenUpdateModal = false;
                _ = List(listRequest);
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Delete()
    {
        try
        {
            DeleteTodoResponse response = await TodoService.Delete(deleteModel);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                AlertService.Success("Todo deleted successfully!");
                IsOpenDeleteModal = false;
                _ = List(listRequest);
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }
}
