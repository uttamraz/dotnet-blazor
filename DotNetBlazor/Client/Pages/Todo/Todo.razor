@page "/todo"

@using DotNetBlazor.Client.Components
@using DotNetBlazor.Client.Services
@using DotNetBlazor.Shared.Models.Todo
@using System.Net
@inject ITodoService TodoService
@inject IAlertService AlertService

<PageTitle>Todo</PageTitle>

<div class="container">
    <div class="main-body">
        <div class="row">
            <div class="col-md-12">
                <button class="btn btn-primary" @onclick="ShowCreateTaskModal">Add Task</button>
            </div>
        </div>
    </div>
</div>


@if (showCreateTaskModal)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Task</h5>
                    <button type="button" class="close" @onclick="CloseCreateTaskModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@createModel" OnValidSubmit="Create">
                        <ValidationError />
                        <DataAnnotationsValidator />
                        <div class="row mb-3">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Task Name</h6>
                            </div>
                            <div class="col-sm-9">
                                <InputText class="form-control" @bind-Value="createModel.Name" />
                                <ValidationMessage For="@(() => createModel.Name)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Description</h6>
                            </div>
                            <div class="col-sm-9">
                                <InputText class="form-control" @bind-Value="createModel.Description" />
                                <ValidationMessage For="@(() => createModel.Description)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Status</h6>
                            </div>
                            <div class="col-sm-9">
                                <InputSelect class="form-control" @bind-Value="createModel.Status">
                                    <option value="">--Select--</option>
                                    <option value="Todo">Todo</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Done">Done</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.Status)" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <SubmitButton Text="Create" Type="success" />
                                <button type="button" class="btn btn-secondary" @onclick="CloseCreateTaskModal">Cancel</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private CreateTodoRequest createModel = new();
    private UpdateTodoRequest updateModel = new();
    private DeleteTodoRequest deleteModel = new();
    private bool showCreateTaskModal = false;

    private void ShowCreateTaskModal()
    {
        showCreateTaskModal = true;
    }

    private void CloseCreateTaskModal()
    {
        showCreateTaskModal = false;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            TodoListResponse response = await TodoService.List(new TodoListRequest());
            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Create()
    {
        try
        {
            CreateTodoResponse response = await TodoService.Create(createModel);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                AlertService.Success("Todo created successfully!");
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Update()
    {
        try
        {
            UpdateTodoResponse response = await TodoService.Update(updateModel);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                AlertService.Success("Todo updated successfully!");
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }

    private async Task Delete()
    {
        try
        {
            DeleteTodoResponse response = await TodoService.Delete(deleteModel);

            if (response?.Response?.Status == (int)HttpStatusCode.OK)
            {
                AlertService.Success("Todo deleted successfully!");
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
    }
}
