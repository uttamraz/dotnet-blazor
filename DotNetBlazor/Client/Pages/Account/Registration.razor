@page "/account/register"
@layout EmptyLayout
@using DotNetBlazor.Client.Services;
@using DotNetBlazor.Shared.Models.Account;
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>First Name</label>
                <InputText @bind-Value="model.FullName" class="form-control" />
                <ValidationMessage For="@(() => model.FullName)" />
            </div>
            <div class="form-group">
                <label>Last Name</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            <NavLink href="account/login" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationRequest model = new();
    private bool loading;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            var response = await AccountService.RegisterAsync(this, model);
            if (response?.Response?.Status == 200)
            {
                AlertService.Success("Registration Successful!", keepAfterRouteChange: true);
                NavigationManager.NavigateTo("account/login");
            }
            else
            {
                AlertService.Error(response?.Response?.Message);
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}