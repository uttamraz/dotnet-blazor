@using DotNetBlazor.Client.Components
@using DotNetBlazor.Client.Services;
@inject IAlertService AlertService;

<ErrorBoundary>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
           <PageNotFound />
        </NotFound>
    </Router>
    <AlertMessage />
</ErrorBoundary>

@code {
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
        TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;

        await base.OnInitializedAsync();
    }

    private void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)
    {
        errorMessage = ((Exception)e.ExceptionObject).Message;
        AlertService.Error(errorMessage);
    }

    private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)
    {
        errorMessage = e.Exception.Message;
        AlertService.Error(errorMessage);
    }

    public void Dispose()
    {
        AppDomain.CurrentDomain.UnhandledException -= CurrentDomain_UnhandledException;
        TaskScheduler.UnobservedTaskException -= TaskScheduler_UnobservedTaskException;
    }
}